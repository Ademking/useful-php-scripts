<?php
/* DESCRIPTION: this PHP script will help you!!! sometimes, when migrating website, 
you must replace domain names in SERIALIZED ARRAYS too!!  so, use this tool to make automatic replacement. */




if (empty($_FILES['dbfilee'])) { ?>

	<form action="" method="POST" enctype="multipart/form-data">
	old domain name<input type="text" value="" placeholder="http://domain1.com" name="olddomain" /><br/> new domain name<input type="text" value="" placeholder="http://domain2.com"  name="newdomain" /><br/> drag .sql file here:<input type="file" name="dbfilee" /><br/><input type="submit" value="GENERATE NEW DB" />
	</form>
	<?php 
}
else {
	$old_domain=$_POST['olddomain'];   $new_domain=$_POST['newdomain'];
	$database_sql_file =  basename($_FILES["dbfilee"]["name"]);
	$content= file_get_contents($database_sql_file);
	$length_difference= strlen($old_domain)- strlen($new_domain);
	preg_match_all('/s\:(\d{1,4})\:\"'. str_replace('/','\/',$old_domain).'/si',$content,$n, PREG_SET_ORDER);
	foreach($n as $each){
		$found_occurence= $each[0];	  $found_chars= $each[1];
		$changed_value	= str_replace('s:'.$found_chars, 's:'. ($found_chars-$length_difference), $found_occurence);
		$new_value		= str_replace($old_domain, $new_domain, $changed_value);
		$content		= str_replace($found_occurence,  $new_value,$content);
	}

	$content=str_replace($old_domain,$new_domain,$content);
	$new_database_filename= str_replace('.sql','_NEW.sql',$database_sql_file);
	header('Content-Type: application/octet-stream');	header("Content-Transfer-Encoding: Binary"); header("Content-disposition: attachment; filename=\"".$new_database_filename."\"");  echo $content; exit;
}
?>
