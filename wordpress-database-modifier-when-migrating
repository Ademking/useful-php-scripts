<?php
/* DESCRIPTION: this script will help you MUCH!! sometimes, when migrating site, 
you must replace domain names in SERIALIZED ARRAYS too. so, this tool will help!  */

if (empty($_FILES['dbfilee'])) { ?>


	<form action="" method="POST" enctype="multipart/form-data">
	old domain name<input type="text" value="http://" placeholder="http://domain1.com" name="olddomain" /><br/> new domain name<input type="text" value="http://" placeholder="http://domain2.com"  name="newdomain" /><br/> drag .sql file here:<input type="file" name="dbfilee" /><br/><input type="submit" value="GENERATE NEW DB" />
	</form>
	<?php 
}
else {
	$old_domain=$_POST['olddomain'];   $new_domain=$_POST['newdomain'];
	$database_sql_file =  basename($_FILES["dbfilee"]["name"]);
	$content= file_get_contents($database_sql_file);
	$length_difference= strlen($old_domain)- strlen($new_domain);
	// Find every occurence of i.e. {s:32:"blablabla"}
	preg_match_all('/(\{|\}|\;)s\:(\d{1,6})\:\"(|.*?)'. str_replace('/','\/',$old_domain).'/si',$content,$n, PREG_SET_ORDER);
	foreach($n as $each){
		$before_s_SYMBOL = $each[1]; //i.e.  | or } or {
		$found_line	= $each[0];	  $found_chars= $each[2];
		$found_line_changed	= str_replace(
			array($before_s_SYMBOL.'s:'.$found_chars,							$old_domain),
			array($before_s_SYMBOL.'s:'.($found_chars - $length_difference),	$new_domain),
			$found_line);
		$content	= str_replace($found_line,	    str_replace($old_domain,$new_domain,$found_line_changed),    $content);
	}
	$content=str_replace($old_domain,$new_domain,$content);
	$new_database_filename= str_replace('.sql','_NEW.sql',$database_sql_file);
	header('Content-Type: application/octet-stream');	header("Content-Transfer-Encoding: Binary"); header("Content-disposition: attachment; filename=\"".$new_database_filename."\"");  echo $content; exit;
}
?>
